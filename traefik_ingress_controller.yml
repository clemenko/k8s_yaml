---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-traefik
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-traefik
  namespace: ingress-traefik
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ingress-traefik
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - middlewares
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - traefik.containo.us
    resources:
      - ingressroutetcps
    verbs:
      - get
      - list
      - watch
### Fixes the TlsOptions bug
  - apiGroups:
      - traefik.containo.us
    resources:
      - tlsoptions
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-traefik
subjects:
- kind: ServiceAccount
  name: ingress-traefik
  namespace: ingress-traefik
---
apiVersion: apps/v1
kind: DaemonSet
#kind: Deployment
metadata:
  name: traefik-ingress-controller
  namespace: ingress-traefik
  labels:
    k8s-app: traefik-ingress-lb
spec:
#  replicas: 3
  selector:
    matchLabels:
      k8s-app: traefik-ingress-lb
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress-lb
        name: traefik-ingress-lb
    spec:
      serviceAccountName: ingress-traefik
      terminationGracePeriodSeconds: 60
      nodeSelector:
        traefik: ingress
      containers:
      - image: traefik
        name: traefik-ingress-lb
        ports:
        - name: http
          containerPort: 80
        - name: admin
          containerPort: 8080
        - name: secure
          containerPort: 443
        args:
        - "--api.insecure=true"
        - "--providers.kubernetesingress=true"
        - "--entrypoints.web.address=:80"
        - "--entrypoints.secure.address=:443"
        - "--metrics.prometheus=true"
        - "--metrics.prometheus.addEntryPointsLabels=true"
        - "--metrics.prometheus.addServicesLabels=true"
        - "--accesslog=true"
        - "--global.sendAnonymousUsage=false"
---
kind: Service
apiVersion: v1
metadata:
  name: traefik-ingress-service
  namespace: ingress-traefik
  annotations:
    prometheus.io.scrape: 'true'
    prometheus.io/port: '8080'
spec:
  selector:
    k8s-app: traefik-ingress-lb
  type: NodePort
  ports:
    - nodePort: 33333
      name: web
      protocol: TCP
      port: 80
      targetPort: 80
    - nodePort: 33380
      name: dashboard
      protocol: TCP
      port: 8080
      targetPort: 8080
    - nodePort: 33443
      name: secure
      protocol: TCP
      port: 443
      targetPort: 443

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: traefik-ingress
  namespace: ingress-traefik
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/rule-type: PathPrefix
spec:
  rules:
    - host: traefik.dockr.life
      http:
        paths:
        - path: /api || /dashboard
          backend:
            serviceName: traefik-ingress-service
            servicePort: 8080

